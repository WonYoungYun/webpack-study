webpack
webpack-cli

리액트, 앵귤러, 뷰
프론트앤드 프레임의 성능향상과 구조를 위하여 사용

서로 연관 관계가 있는 웹 자원들을 js, css, img 와 같은 스태틱한 자원으로 변환해주는 모델 번들러

왜 웹팩을 사용하는가?
1.새로운 형태의 Web Task Manager
 기존 Web Task Manager(Gulp, Grunt)의 기능 + 모듈 의존성 관리

2. javascript의 Code based Modules 관리
 자바스크립트 모듈화의 필요성
 기존 모듈 로더들과의 차이점 : 모듈간의 관계를 청크(chunk) 단위로 나눠 필요할 떄 로딩
 현대의 웹에서 JS의 역활이 커짐에 따라, Client Side에 들어가는 코드량이 많아지고 복잡해짐
 복잡한 웹 앱을 관리하기 위해 모듈 단위로 관리하는  Common JS, AMD, ES6 Modules등이 등장
 가독성이나 다수 모듈 미병행 처리등의 약점을 보완하기 위해 Webpack 등장

자바스크립트 모듈화 문제란?
    <script src=""module1.js"></scirpt>
    <script src=""module2.js"></scirpt>
    <script src=""module3.js"></scirpt>
    <script src=""module4.js"></scirpt>
    -상기 모듈 로딩 방식의 문제점 : 전역변수 충돌, 스크립트 로딩 순서, 복잡도에 따른 관리상의 문제
     이를 해결하기 위해 AMD 및 기타 모듈 로더들, webpack이 등장

webpack의 철학
 1. Everything is Module
    모든 웹 자원(js, css, html)이 모듈 형태로 로딩 가능
    require('base.css');
    require('main.js');
 2. Load only "what" you need and "when" you need
    초기에 불필요한 것들을 모두 로딩하지 않고, 필요할 때 필요한 것만 로딩하여 사용

    